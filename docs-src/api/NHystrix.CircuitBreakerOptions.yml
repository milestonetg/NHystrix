### YamlMime:ManagedReference
items:
- uid: NHystrix.CircuitBreakerOptions
  commentId: T:NHystrix.CircuitBreakerOptions
  id: CircuitBreakerOptions
  parent: NHystrix
  children:
  - NHystrix.CircuitBreakerOptions.CircuitBreakerErrorThresholdPercentage
  - NHystrix.CircuitBreakerOptions.CircuitBreakerForceClosed
  - NHystrix.CircuitBreakerOptions.CircuitBreakerForceOpen
  - NHystrix.CircuitBreakerOptions.CircuitBreakerRequestVolumeThreshold
  - NHystrix.CircuitBreakerOptions.CircuitBreakerSleepWindowInMilliseconds
  langs:
  - csharp
  - vb
  name: CircuitBreakerOptions
  nameWithType: CircuitBreakerOptions
  fullName: NHystrix.CircuitBreakerOptions
  type: Class
  source:
    remote:
      path: src/NHystrix/CircuitBreakerOptions.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: CircuitBreakerOptions
    path: ../src/NHystrix/CircuitBreakerOptions.cs
    startLine: 5
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nConfiguration options for a <xref href=\"NHystrix.HystrixCircuitBreaker\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class CircuitBreakerOptions
    content.vb: Public Class CircuitBreakerOptions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NHystrix.CircuitBreakerOptions.CircuitBreakerForceOpen
  commentId: P:NHystrix.CircuitBreakerOptions.CircuitBreakerForceOpen
  id: CircuitBreakerForceOpen
  parent: NHystrix.CircuitBreakerOptions
  langs:
  - csharp
  - vb
  name: CircuitBreakerForceOpen
  nameWithType: CircuitBreakerOptions.CircuitBreakerForceOpen
  fullName: NHystrix.CircuitBreakerOptions.CircuitBreakerForceOpen
  type: Property
  source:
    remote:
      path: src/NHystrix/CircuitBreakerOptions.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: CircuitBreakerForceOpen
    path: ../src/NHystrix/CircuitBreakerOptions.cs
    startLine: 11
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nGets or sets a value indicating whether [circuit breaker force open]. Default is false.\n"
  example: []
  syntax:
    content: public bool CircuitBreakerForceOpen { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if [circuit breaker force open]; otherwise, <code>false</code>. Default is false.
    content.vb: Public Property CircuitBreakerForceOpen As Boolean
  overload: NHystrix.CircuitBreakerOptions.CircuitBreakerForceOpen*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NHystrix.CircuitBreakerOptions.CircuitBreakerForceClosed
  commentId: P:NHystrix.CircuitBreakerOptions.CircuitBreakerForceClosed
  id: CircuitBreakerForceClosed
  parent: NHystrix.CircuitBreakerOptions
  langs:
  - csharp
  - vb
  name: CircuitBreakerForceClosed
  nameWithType: CircuitBreakerOptions.CircuitBreakerForceClosed
  fullName: NHystrix.CircuitBreakerOptions.CircuitBreakerForceClosed
  type: Property
  source:
    remote:
      path: src/NHystrix/CircuitBreakerOptions.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: CircuitBreakerForceClosed
    path: ../src/NHystrix/CircuitBreakerOptions.cs
    startLine: 17
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nGets or sets a value indicating whether [circuit breaker force closed]. Default is false.\n"
  example: []
  syntax:
    content: public bool CircuitBreakerForceClosed { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if [circuit breaker force closed]; otherwise, <code>false</code>. Default is false.
    content.vb: Public Property CircuitBreakerForceClosed As Boolean
  overload: NHystrix.CircuitBreakerOptions.CircuitBreakerForceClosed*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NHystrix.CircuitBreakerOptions.CircuitBreakerSleepWindowInMilliseconds
  commentId: P:NHystrix.CircuitBreakerOptions.CircuitBreakerSleepWindowInMilliseconds
  id: CircuitBreakerSleepWindowInMilliseconds
  parent: NHystrix.CircuitBreakerOptions
  langs:
  - csharp
  - vb
  name: CircuitBreakerSleepWindowInMilliseconds
  nameWithType: CircuitBreakerOptions.CircuitBreakerSleepWindowInMilliseconds
  fullName: NHystrix.CircuitBreakerOptions.CircuitBreakerSleepWindowInMilliseconds
  type: Property
  source:
    remote:
      path: src/NHystrix/CircuitBreakerOptions.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: CircuitBreakerSleepWindowInMilliseconds
    path: ../src/NHystrix/CircuitBreakerOptions.cs
    startLine: 23
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nGets or sets the circuit breaker sleep window in milliseconds. Default is 5000.\n"
  example: []
  syntax:
    content: public long CircuitBreakerSleepWindowInMilliseconds { get; set; }
    parameters: []
    return:
      type: System.Int64
      description: The circuit breaker sleep window in milliseconds. Default is 5000.
    content.vb: Public Property CircuitBreakerSleepWindowInMilliseconds As Long
  overload: NHystrix.CircuitBreakerOptions.CircuitBreakerSleepWindowInMilliseconds*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NHystrix.CircuitBreakerOptions.CircuitBreakerErrorThresholdPercentage
  commentId: P:NHystrix.CircuitBreakerOptions.CircuitBreakerErrorThresholdPercentage
  id: CircuitBreakerErrorThresholdPercentage
  parent: NHystrix.CircuitBreakerOptions
  langs:
  - csharp
  - vb
  name: CircuitBreakerErrorThresholdPercentage
  nameWithType: CircuitBreakerOptions.CircuitBreakerErrorThresholdPercentage
  fullName: NHystrix.CircuitBreakerOptions.CircuitBreakerErrorThresholdPercentage
  type: Property
  source:
    remote:
      path: src/NHystrix/CircuitBreakerOptions.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: CircuitBreakerErrorThresholdPercentage
    path: ../src/NHystrix/CircuitBreakerOptions.cs
    startLine: 29
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nGets or sets the circuit breaker error threshold percentage. Default is 50.\n"
  example: []
  syntax:
    content: public int CircuitBreakerErrorThresholdPercentage { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: The circuit breaker error threshold percentage. Default is 50.
    content.vb: Public Property CircuitBreakerErrorThresholdPercentage As Integer
  overload: NHystrix.CircuitBreakerOptions.CircuitBreakerErrorThresholdPercentage*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NHystrix.CircuitBreakerOptions.CircuitBreakerRequestVolumeThreshold
  commentId: P:NHystrix.CircuitBreakerOptions.CircuitBreakerRequestVolumeThreshold
  id: CircuitBreakerRequestVolumeThreshold
  parent: NHystrix.CircuitBreakerOptions
  langs:
  - csharp
  - vb
  name: CircuitBreakerRequestVolumeThreshold
  nameWithType: CircuitBreakerOptions.CircuitBreakerRequestVolumeThreshold
  fullName: NHystrix.CircuitBreakerOptions.CircuitBreakerRequestVolumeThreshold
  type: Property
  source:
    remote:
      path: src/NHystrix/CircuitBreakerOptions.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: CircuitBreakerRequestVolumeThreshold
    path: ../src/NHystrix/CircuitBreakerOptions.cs
    startLine: 35
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nNumber of requests that must be made within a statisticalWindow before open/close decisions are made using stats. Default is 20.\n"
  example: []
  syntax:
    content: public int CircuitBreakerRequestVolumeThreshold { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: The circuit breaker request volume threshold. Default is 20.
    content.vb: Public Property CircuitBreakerRequestVolumeThreshold As Integer
  overload: NHystrix.CircuitBreakerOptions.CircuitBreakerRequestVolumeThreshold*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: NHystrix.HystrixCircuitBreaker
  commentId: T:NHystrix.HystrixCircuitBreaker
  isExternal: false
  name: HystrixCircuitBreaker
  nameWithType: HystrixCircuitBreaker
  fullName: NHystrix.HystrixCircuitBreaker
- uid: NHystrix
  commentId: N:NHystrix
  isExternal: false
  name: NHystrix
  nameWithType: NHystrix
  fullName: NHystrix
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: NHystrix.CircuitBreakerOptions.CircuitBreakerForceOpen*
  commentId: Overload:NHystrix.CircuitBreakerOptions.CircuitBreakerForceOpen
  isExternal: false
  name: CircuitBreakerForceOpen
  nameWithType: CircuitBreakerOptions.CircuitBreakerForceOpen
  fullName: NHystrix.CircuitBreakerOptions.CircuitBreakerForceOpen
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NHystrix.CircuitBreakerOptions.CircuitBreakerForceClosed*
  commentId: Overload:NHystrix.CircuitBreakerOptions.CircuitBreakerForceClosed
  isExternal: false
  name: CircuitBreakerForceClosed
  nameWithType: CircuitBreakerOptions.CircuitBreakerForceClosed
  fullName: NHystrix.CircuitBreakerOptions.CircuitBreakerForceClosed
- uid: NHystrix.CircuitBreakerOptions.CircuitBreakerSleepWindowInMilliseconds*
  commentId: Overload:NHystrix.CircuitBreakerOptions.CircuitBreakerSleepWindowInMilliseconds
  isExternal: false
  name: CircuitBreakerSleepWindowInMilliseconds
  nameWithType: CircuitBreakerOptions.CircuitBreakerSleepWindowInMilliseconds
  fullName: NHystrix.CircuitBreakerOptions.CircuitBreakerSleepWindowInMilliseconds
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: NHystrix.CircuitBreakerOptions.CircuitBreakerErrorThresholdPercentage*
  commentId: Overload:NHystrix.CircuitBreakerOptions.CircuitBreakerErrorThresholdPercentage
  isExternal: false
  name: CircuitBreakerErrorThresholdPercentage
  nameWithType: CircuitBreakerOptions.CircuitBreakerErrorThresholdPercentage
  fullName: NHystrix.CircuitBreakerOptions.CircuitBreakerErrorThresholdPercentage
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NHystrix.CircuitBreakerOptions.CircuitBreakerRequestVolumeThreshold*
  commentId: Overload:NHystrix.CircuitBreakerOptions.CircuitBreakerRequestVolumeThreshold
  isExternal: false
  name: CircuitBreakerRequestVolumeThreshold
  nameWithType: CircuitBreakerOptions.CircuitBreakerRequestVolumeThreshold
  fullName: NHystrix.CircuitBreakerOptions.CircuitBreakerRequestVolumeThreshold
