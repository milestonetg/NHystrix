### YamlMime:ManagedReference
items:
- uid: NHystrix.HystrixCommand`2
  commentId: T:NHystrix.HystrixCommand`2
  id: HystrixCommand`2
  parent: NHystrix
  children:
  - NHystrix.HystrixCommand`2.#ctor(NHystrix.HystrixCommandKey,NHystrix.HystrixCommandProperties)
  - NHystrix.HystrixCommand`2.CommandKey
  - NHystrix.HystrixCommand`2.Dispose
  - NHystrix.HystrixCommand`2.Dispose(System.Boolean)
  - NHystrix.HystrixCommand`2.Execute(`0)
  - NHystrix.HystrixCommand`2.ExecuteAsync(`0)
  - NHystrix.HystrixCommand`2.Finalize
  - NHystrix.HystrixCommand`2.GetFallback
  - NHystrix.HystrixCommand`2.RunAsync(`0)
  langs:
  - csharp
  - vb
  name: HystrixCommand<TRequest, TResult>
  nameWithType: HystrixCommand<TRequest, TResult>
  fullName: NHystrix.HystrixCommand<TRequest, TResult>
  type: Class
  source:
    remote:
      path: src/NHystrix/HystrixCommand.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: HystrixCommand
    path: ../src/NHystrix/HystrixCommand.cs
    startLine: 47
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nBase class for all HystrixCommands. Providing functionality for:\n- Bulkhead Pattern\n- Timeout\n- Circuit Breaker Pattern\n- Fallback responses\n"
  remarks: "\n#### Fallback\n\nYou can support graceful degradation in a Hystrix command by adding a fallback method that Hystrix will call \nto obtain a default value or values in case the main command fails.  You will want to implement a fallback \nfor most Hystrix commands that might conceivably fail, with a couple of exceptions:\n\n1. a command that performs a write operation\n* If your Hystrix command is designed to do a write operation rather than to return a value, \nthere isn&apos;t much point in implementing a fallback. If the write fails, you probably want the failure to propagate back to the caller.\n1. batch systems/offline compute\n* If your Hystrix command is filling up a cache, or generating a report, or doing any sort of offline computation, \nit&apos;s usually more appropriate to propagate the error back to the caller who can then retry the command later, \nrather than to send the caller a silently-degraded response.\n\nWhether or not your command has a fallback, all of the usual Hystrix state and circuit-breaker state/metrics are updated to indicate the command failure.\n\nIn an ordinary `HystrixCommand` you implement a fallback by means of a <xref href=\"NHystrix.HystrixCommand%602.GetFallback\" data-throw-if-not-resolved=\"false\"></xref>() implementation. \nHystrix will execute this fallback for all types of failure such as `RunAsync()` failure, timeout, thread pool or semaphore rejection, and circuit-breaker short-circuiting.\n\n#### Error Propagation\n\nAll exceptions thrown from the `RunAsync()` method except for <xref href=\"NHystrix.Exceptions.HystrixBadRequestException\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> \ncount as failures and trigger `GetFallback()` and circuit-breaker logic.\n\nYou can wrap the exception that you would like to throw in `HystrixBadRequestException`. The `HystrixBadRequestException` is intended \nfor use cases such as reporting illegal arguments or non-system failures that should not count against the failure metrics \nand should not trigger fallback logic.\n"
  example: []
  syntax:
    content: 'public abstract class HystrixCommand<TRequest, TResult> : IHystrixCommand<TRequest, TResult>, IDisposable'
    typeParameters:
    - id: TRequest
      description: The type of the request.
    - id: TResult
      description: The type of the result.
    content.vb: >-
      Public MustInherit Class HystrixCommand(Of TRequest, TResult)
          Implements IHystrixCommand(Of TRequest, TResult), IDisposable
  seealso:
  - linkId: NHystrix.IHystrixCommand`2
    commentId: T:NHystrix.IHystrixCommand`2
  inheritance:
  - System.Object
  implements:
  - NHystrix.IHystrixCommand{{TRequest},{TResult}}
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: HystrixCommand(Of TRequest, TResult)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult)
  name.vb: HystrixCommand(Of TRequest, TResult)
- uid: NHystrix.HystrixCommand`2.#ctor(NHystrix.HystrixCommandKey,NHystrix.HystrixCommandProperties)
  commentId: M:NHystrix.HystrixCommand`2.#ctor(NHystrix.HystrixCommandKey,NHystrix.HystrixCommandProperties)
  id: '#ctor(NHystrix.HystrixCommandKey,NHystrix.HystrixCommandProperties)'
  parent: NHystrix.HystrixCommand`2
  langs:
  - csharp
  - vb
  name: HystrixCommand(HystrixCommandKey, HystrixCommandProperties)
  nameWithType: HystrixCommand<TRequest, TResult>.HystrixCommand(HystrixCommandKey, HystrixCommandProperties)
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.HystrixCommand(NHystrix.HystrixCommandKey, NHystrix.HystrixCommandProperties)
  type: Constructor
  source:
    remote:
      path: src/NHystrix/HystrixCommand.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: .ctor
    path: ../src/NHystrix/HystrixCommand.cs
    startLine: 59
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nInitializes a new instance of the <xref href=\"NHystrix.HystrixCommand%602\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected HystrixCommand(HystrixCommandKey commandKey, HystrixCommandProperties properties)
    parameters:
    - id: commandKey
      type: NHystrix.HystrixCommandKey
      description: The command key.
    - id: properties
      type: NHystrix.HystrixCommandProperties
      description: The properties.
    content.vb: Protected Sub New(commandKey As HystrixCommandKey, properties As HystrixCommandProperties)
  overload: NHystrix.HystrixCommand`2.#ctor*
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).HystrixCommand(HystrixCommandKey, HystrixCommandProperties)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).HystrixCommand(NHystrix.HystrixCommandKey, NHystrix.HystrixCommandProperties)
- uid: NHystrix.HystrixCommand`2.CommandKey
  commentId: P:NHystrix.HystrixCommand`2.CommandKey
  id: CommandKey
  parent: NHystrix.HystrixCommand`2
  langs:
  - csharp
  - vb
  name: CommandKey
  nameWithType: HystrixCommand<TRequest, TResult>.CommandKey
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.CommandKey
  type: Property
  source:
    remote:
      path: src/NHystrix/HystrixCommand.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: CommandKey
    path: ../src/NHystrix/HystrixCommand.cs
    startLine: 77
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nGets the command key.\n"
  example: []
  syntax:
    content: public HystrixCommandKey CommandKey { get; }
    parameters: []
    return:
      type: NHystrix.HystrixCommandKey
      description: The command key.
    content.vb: Public ReadOnly Property CommandKey As HystrixCommandKey
  overload: NHystrix.HystrixCommand`2.CommandKey*
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).CommandKey
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).CommandKey
- uid: NHystrix.HystrixCommand`2.Execute(`0)
  commentId: M:NHystrix.HystrixCommand`2.Execute(`0)
  id: Execute(`0)
  parent: NHystrix.HystrixCommand`2
  langs:
  - csharp
  - vb
  name: Execute(TRequest)
  nameWithType: HystrixCommand<TRequest, TResult>.Execute(TRequest)
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.Execute(TRequest)
  type: Method
  source:
    remote:
      path: src/NHystrix/HystrixCommand.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: Execute
    path: ../src/NHystrix/HystrixCommand.cs
    startLine: 86
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nExecutes the command.\n"
  example: []
  syntax:
    content: public TResult Execute(TRequest request = null)
    parameters:
    - id: request
      type: '{TRequest}'
    return:
      type: '{TResult}'
      description: TResult.
    content.vb: Public Function Execute(request As TRequest = Nothing) As TResult
  overload: NHystrix.HystrixCommand`2.Execute*
  exceptions:
  - type: NHystrix.Exceptions.HystrixBadRequestException
    commentId: T:NHystrix.Exceptions.HystrixBadRequestException
  - type: NHystrix.Exceptions.HystrixFailureException
    commentId: T:NHystrix.Exceptions.HystrixFailureException
  - type: NHystrix.Exceptions.HystrixTimeoutException
    commentId: T:NHystrix.Exceptions.HystrixTimeoutException
  implements:
  - NHystrix.IHystrixCommand{{TRequest},{TResult}}.Execute({TRequest})
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).Execute(TRequest)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).Execute(TRequest)
- uid: NHystrix.HystrixCommand`2.ExecuteAsync(`0)
  commentId: M:NHystrix.HystrixCommand`2.ExecuteAsync(`0)
  id: ExecuteAsync(`0)
  parent: NHystrix.HystrixCommand`2
  langs:
  - csharp
  - vb
  name: ExecuteAsync(TRequest)
  nameWithType: HystrixCommand<TRequest, TResult>.ExecuteAsync(TRequest)
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.ExecuteAsync(TRequest)
  type: Method
  source:
    remote:
      path: src/NHystrix/HystrixCommand.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: ExecuteAsync
    path: ../src/NHystrix/HystrixCommand.cs
    startLine: 101
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nExecutes the command.\n"
  example: []
  syntax:
    content: public Task<TResult> ExecuteAsync(TRequest request = null)
    parameters:
    - id: request
      type: '{TRequest}'
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: Task&lt;TResult>.
    content.vb: Public Function ExecuteAsync(request As TRequest = Nothing) As Task(Of TResult)
  overload: NHystrix.HystrixCommand`2.ExecuteAsync*
  exceptions:
  - type: NHystrix.Exceptions.HystrixBadRequestException
    commentId: T:NHystrix.Exceptions.HystrixBadRequestException
  - type: NHystrix.Exceptions.HystrixFailureException
    commentId: T:NHystrix.Exceptions.HystrixFailureException
  - type: NHystrix.Exceptions.HystrixTimeoutException
    commentId: T:NHystrix.Exceptions.HystrixTimeoutException
  implements:
  - NHystrix.IHystrixCommand{{TRequest},{TResult}}.ExecuteAsync({TRequest})
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).ExecuteAsync(TRequest)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).ExecuteAsync(TRequest)
- uid: NHystrix.HystrixCommand`2.RunAsync(`0)
  commentId: M:NHystrix.HystrixCommand`2.RunAsync(`0)
  id: RunAsync(`0)
  parent: NHystrix.HystrixCommand`2
  langs:
  - csharp
  - vb
  name: RunAsync(TRequest)
  nameWithType: HystrixCommand<TRequest, TResult>.RunAsync(TRequest)
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.RunAsync(TRequest)
  type: Method
  source:
    remote:
      path: src/NHystrix/HystrixCommand.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: RunAsync
    path: ../src/NHystrix/HystrixCommand.cs
    startLine: 249
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nImplements the logic to perform when <xref href=\"NHystrix.HystrixCommand%602.ExecuteAsync(%600)\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: protected abstract Task<TResult> RunAsync(TRequest request)
    parameters:
    - id: request
      type: '{TRequest}'
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: Task&lt;TResult>.
    content.vb: Protected MustOverride Function RunAsync(request As TRequest) As Task(Of TResult)
  overload: NHystrix.HystrixCommand`2.RunAsync*
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).RunAsync(TRequest)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).RunAsync(TRequest)
- uid: NHystrix.HystrixCommand`2.GetFallback
  commentId: M:NHystrix.HystrixCommand`2.GetFallback
  id: GetFallback
  parent: NHystrix.HystrixCommand`2
  langs:
  - csharp
  - vb
  name: GetFallback()
  nameWithType: HystrixCommand<TRequest, TResult>.GetFallback()
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.GetFallback()
  type: Method
  source:
    remote:
      path: src/NHystrix/HystrixCommand.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: GetFallback
    path: ../src/NHystrix/HystrixCommand.cs
    startLine: 256
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nWhen overridden in a derived class, returns the fallback response when fallback is enabled.\n"
  example: []
  syntax:
    content: protected virtual Task<TResult> GetFallback()
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The fallback response for the command.
    content.vb: Protected Overridable Function GetFallback As Task(Of TResult)
  overload: NHystrix.HystrixCommand`2.GetFallback*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).GetFallback()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).GetFallback()
- uid: NHystrix.HystrixCommand`2.Dispose(System.Boolean)
  commentId: M:NHystrix.HystrixCommand`2.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: NHystrix.HystrixCommand`2
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: HystrixCommand<TRequest, TResult>.Dispose(Boolean)
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/NHystrix/HystrixCommand.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: Dispose
    path: ../src/NHystrix/HystrixCommand.cs
    startLine: 309
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nReleases unmanaged and - optionally - managed resources.\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: <code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: NHystrix.HystrixCommand`2.Dispose*
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).Dispose(System.Boolean)
- uid: NHystrix.HystrixCommand`2.Finalize
  commentId: M:NHystrix.HystrixCommand`2.Finalize
  id: Finalize
  parent: NHystrix.HystrixCommand`2
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: HystrixCommand<TRequest, TResult>.Finalize()
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.Finalize()
  type: Method
  source:
    remote:
      path: src/NHystrix/HystrixCommand.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: Finalize
    path: ../src/NHystrix/HystrixCommand.cs
    startLine: 330
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nFinalizes an instance of the <xref href=\"NHystrix.HystrixCommand%602\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: NHystrix.HystrixCommand`2.Finalize*
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).Finalize()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).Finalize()
- uid: NHystrix.HystrixCommand`2.Dispose
  commentId: M:NHystrix.HystrixCommand`2.Dispose
  id: Dispose
  parent: NHystrix.HystrixCommand`2
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: HystrixCommand<TRequest, TResult>.Dispose()
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.Dispose()
  type: Method
  source:
    remote:
      path: src/NHystrix/HystrixCommand.cs
      branch: master
      repo: https://github.com/milestonetg/NHystrix.git
    id: Dispose
    path: ../src/NHystrix/HystrixCommand.cs
    startLine: 340
  assemblies:
  - NHystrix
  namespace: NHystrix
  summary: "\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: NHystrix.HystrixCommand`2.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).Dispose()
references:
- uid: NHystrix.HystrixCommand`2.GetFallback
  commentId: M:NHystrix.HystrixCommand`2.GetFallback
- uid: NHystrix.Exceptions.HystrixBadRequestException
  commentId: T:NHystrix.Exceptions.HystrixBadRequestException
  isExternal: false
  name: HystrixBadRequestException
  nameWithType: HystrixBadRequestException
  fullName: NHystrix.Exceptions.HystrixBadRequestException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: NHystrix.IHystrixCommand`2
  commentId: T:NHystrix.IHystrixCommand`2
  isExternal: false
  name: IHystrixCommand<TRequest, TResult>
  nameWithType: IHystrixCommand<TRequest, TResult>
  fullName: NHystrix.IHystrixCommand<TRequest, TResult>
  nameWithType.vb: IHystrixCommand(Of TRequest, TResult)
  fullName.vb: NHystrix.IHystrixCommand(Of TRequest, TResult)
  name.vb: IHystrixCommand(Of TRequest, TResult)
  spec.csharp:
  - uid: NHystrix.IHystrixCommand`2
    name: IHystrixCommand
    nameWithType: IHystrixCommand
    fullName: NHystrix.IHystrixCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NHystrix.IHystrixCommand`2
    name: IHystrixCommand
    nameWithType: IHystrixCommand
    fullName: NHystrix.IHystrixCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NHystrix
  commentId: N:NHystrix
  isExternal: false
  name: NHystrix
  nameWithType: NHystrix
  fullName: NHystrix
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NHystrix.IHystrixCommand{{TRequest},{TResult}}
  commentId: T:NHystrix.IHystrixCommand{`0,`1}
  parent: NHystrix
  definition: NHystrix.IHystrixCommand`2
  name: IHystrixCommand<TRequest, TResult>
  nameWithType: IHystrixCommand<TRequest, TResult>
  fullName: NHystrix.IHystrixCommand<TRequest, TResult>
  nameWithType.vb: IHystrixCommand(Of TRequest, TResult)
  fullName.vb: NHystrix.IHystrixCommand(Of TRequest, TResult)
  name.vb: IHystrixCommand(Of TRequest, TResult)
  spec.csharp:
  - uid: NHystrix.IHystrixCommand`2
    name: IHystrixCommand
    nameWithType: IHystrixCommand
    fullName: NHystrix.IHystrixCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NHystrix.IHystrixCommand`2
    name: IHystrixCommand
    nameWithType: IHystrixCommand
    fullName: NHystrix.IHystrixCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: NHystrix.HystrixCommand`2
  commentId: T:NHystrix.HystrixCommand`2
  isExternal: false
  name: HystrixCommand<TRequest, TResult>
  nameWithType: HystrixCommand<TRequest, TResult>
  fullName: NHystrix.HystrixCommand<TRequest, TResult>
  nameWithType.vb: HystrixCommand(Of TRequest, TResult)
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult)
  name.vb: HystrixCommand(Of TRequest, TResult)
  spec.csharp:
  - uid: NHystrix.HystrixCommand`2
    name: HystrixCommand
    nameWithType: HystrixCommand
    fullName: NHystrix.HystrixCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NHystrix.HystrixCommand`2
    name: HystrixCommand
    nameWithType: HystrixCommand
    fullName: NHystrix.HystrixCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NHystrix.HystrixCommand`2.#ctor*
  commentId: Overload:NHystrix.HystrixCommand`2.#ctor
  isExternal: false
  name: HystrixCommand
  nameWithType: HystrixCommand<TRequest, TResult>.HystrixCommand
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.HystrixCommand
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).HystrixCommand
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).HystrixCommand
- uid: NHystrix.HystrixCommandKey
  commentId: T:NHystrix.HystrixCommandKey
  parent: NHystrix
  isExternal: false
  name: HystrixCommandKey
  nameWithType: HystrixCommandKey
  fullName: NHystrix.HystrixCommandKey
- uid: NHystrix.HystrixCommandProperties
  commentId: T:NHystrix.HystrixCommandProperties
  parent: NHystrix
  isExternal: false
  name: HystrixCommandProperties
  nameWithType: HystrixCommandProperties
  fullName: NHystrix.HystrixCommandProperties
- uid: NHystrix.HystrixCommand`2.CommandKey*
  commentId: Overload:NHystrix.HystrixCommand`2.CommandKey
  isExternal: false
  name: CommandKey
  nameWithType: HystrixCommand<TRequest, TResult>.CommandKey
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.CommandKey
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).CommandKey
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).CommandKey
- uid: NHystrix.HystrixCommand`2.Execute*
  commentId: Overload:NHystrix.HystrixCommand`2.Execute
  isExternal: false
  name: Execute
  nameWithType: HystrixCommand<TRequest, TResult>.Execute
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.Execute
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).Execute
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).Execute
- uid: NHystrix.IHystrixCommand{{TRequest},{TResult}}.Execute({TRequest})
  commentId: M:NHystrix.IHystrixCommand{`0,`1}.Execute(`0)
  parent: NHystrix.IHystrixCommand{{TRequest},{TResult}}
  definition: NHystrix.IHystrixCommand`2.Execute(`0)
  name: Execute(TRequest)
  nameWithType: IHystrixCommand<TRequest, TResult>.Execute(TRequest)
  fullName: NHystrix.IHystrixCommand<TRequest, TResult>.Execute(TRequest)
  nameWithType.vb: IHystrixCommand(Of TRequest, TResult).Execute(TRequest)
  fullName.vb: NHystrix.IHystrixCommand(Of TRequest, TResult).Execute(TRequest)
  spec.csharp:
  - uid: NHystrix.IHystrixCommand`2.Execute(`0)
    name: Execute
    nameWithType: IHystrixCommand<TRequest, TResult>.Execute
    fullName: NHystrix.IHystrixCommand<TRequest, TResult>.Execute
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NHystrix.IHystrixCommand`2.Execute(`0)
    name: Execute
    nameWithType: IHystrixCommand(Of TRequest, TResult).Execute
    fullName: NHystrix.IHystrixCommand(Of TRequest, TResult).Execute
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: NHystrix.Exceptions.HystrixFailureException
  commentId: T:NHystrix.Exceptions.HystrixFailureException
  parent: NHystrix.Exceptions
  isExternal: false
  name: HystrixFailureException
  nameWithType: HystrixFailureException
  fullName: NHystrix.Exceptions.HystrixFailureException
- uid: NHystrix.Exceptions.HystrixTimeoutException
  commentId: T:NHystrix.Exceptions.HystrixTimeoutException
  isExternal: false
  name: HystrixTimeoutException
  nameWithType: HystrixTimeoutException
  fullName: NHystrix.Exceptions.HystrixTimeoutException
- uid: '{TRequest}'
  commentId: '!:TRequest'
  definition: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: NHystrix.IHystrixCommand`2.Execute(`0)
  commentId: M:NHystrix.IHystrixCommand`2.Execute(`0)
  isExternal: false
  name: Execute(TRequest)
  nameWithType: IHystrixCommand<TRequest, TResult>.Execute(TRequest)
  fullName: NHystrix.IHystrixCommand<TRequest, TResult>.Execute(TRequest)
  nameWithType.vb: IHystrixCommand(Of TRequest, TResult).Execute(TRequest)
  fullName.vb: NHystrix.IHystrixCommand(Of TRequest, TResult).Execute(TRequest)
  spec.csharp:
  - uid: NHystrix.IHystrixCommand`2.Execute(`0)
    name: Execute
    nameWithType: IHystrixCommand<TRequest, TResult>.Execute
    fullName: NHystrix.IHystrixCommand<TRequest, TResult>.Execute
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NHystrix.IHystrixCommand`2.Execute(`0)
    name: Execute
    nameWithType: IHystrixCommand(Of TRequest, TResult).Execute
    fullName: NHystrix.IHystrixCommand(Of TRequest, TResult).Execute
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: NHystrix.Exceptions
  commentId: N:NHystrix.Exceptions
  isExternal: false
  name: NHystrix.Exceptions
  nameWithType: NHystrix.Exceptions
  fullName: NHystrix.Exceptions
- uid: TRequest
  isExternal: false
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: NHystrix.HystrixCommand`2.ExecuteAsync*
  commentId: Overload:NHystrix.HystrixCommand`2.ExecuteAsync
  isExternal: false
  name: ExecuteAsync
  nameWithType: HystrixCommand<TRequest, TResult>.ExecuteAsync
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.ExecuteAsync
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).ExecuteAsync
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).ExecuteAsync
- uid: NHystrix.IHystrixCommand{{TRequest},{TResult}}.ExecuteAsync({TRequest})
  commentId: M:NHystrix.IHystrixCommand{`0,`1}.ExecuteAsync(`0)
  parent: NHystrix.IHystrixCommand{{TRequest},{TResult}}
  definition: NHystrix.IHystrixCommand`2.ExecuteAsync(`0)
  name: ExecuteAsync(TRequest)
  nameWithType: IHystrixCommand<TRequest, TResult>.ExecuteAsync(TRequest)
  fullName: NHystrix.IHystrixCommand<TRequest, TResult>.ExecuteAsync(TRequest)
  nameWithType.vb: IHystrixCommand(Of TRequest, TResult).ExecuteAsync(TRequest)
  fullName.vb: NHystrix.IHystrixCommand(Of TRequest, TResult).ExecuteAsync(TRequest)
  spec.csharp:
  - uid: NHystrix.IHystrixCommand`2.ExecuteAsync(`0)
    name: ExecuteAsync
    nameWithType: IHystrixCommand<TRequest, TResult>.ExecuteAsync
    fullName: NHystrix.IHystrixCommand<TRequest, TResult>.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NHystrix.IHystrixCommand`2.ExecuteAsync(`0)
    name: ExecuteAsync
    nameWithType: IHystrixCommand(Of TRequest, TResult).ExecuteAsync
    fullName: NHystrix.IHystrixCommand(Of TRequest, TResult).ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{`1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NHystrix.IHystrixCommand`2.ExecuteAsync(`0)
  commentId: M:NHystrix.IHystrixCommand`2.ExecuteAsync(`0)
  isExternal: false
  name: ExecuteAsync(TRequest)
  nameWithType: IHystrixCommand<TRequest, TResult>.ExecuteAsync(TRequest)
  fullName: NHystrix.IHystrixCommand<TRequest, TResult>.ExecuteAsync(TRequest)
  nameWithType.vb: IHystrixCommand(Of TRequest, TResult).ExecuteAsync(TRequest)
  fullName.vb: NHystrix.IHystrixCommand(Of TRequest, TResult).ExecuteAsync(TRequest)
  spec.csharp:
  - uid: NHystrix.IHystrixCommand`2.ExecuteAsync(`0)
    name: ExecuteAsync
    nameWithType: IHystrixCommand<TRequest, TResult>.ExecuteAsync
    fullName: NHystrix.IHystrixCommand<TRequest, TResult>.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NHystrix.IHystrixCommand`2.ExecuteAsync(`0)
    name: ExecuteAsync
    nameWithType: IHystrixCommand(Of TRequest, TResult).ExecuteAsync
    fullName: NHystrix.IHystrixCommand(Of TRequest, TResult).ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: NHystrix.HystrixCommand`2.ExecuteAsync(`0)
  commentId: M:NHystrix.HystrixCommand`2.ExecuteAsync(`0)
- uid: NHystrix.HystrixCommand`2.RunAsync*
  commentId: Overload:NHystrix.HystrixCommand`2.RunAsync
  isExternal: false
  name: RunAsync
  nameWithType: HystrixCommand<TRequest, TResult>.RunAsync
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.RunAsync
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).RunAsync
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).RunAsync
- uid: NHystrix.HystrixCommand`2.GetFallback*
  commentId: Overload:NHystrix.HystrixCommand`2.GetFallback
  isExternal: false
  name: GetFallback
  nameWithType: HystrixCommand<TRequest, TResult>.GetFallback
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.GetFallback
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).GetFallback
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).GetFallback
- uid: System.NotImplementedException
  commentId: T:System.NotImplementedException
- uid: NHystrix.HystrixCommand`2.Dispose*
  commentId: Overload:NHystrix.HystrixCommand`2.Dispose
  isExternal: false
  name: Dispose
  nameWithType: HystrixCommand<TRequest, TResult>.Dispose
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.Dispose
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).Dispose
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).Dispose
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NHystrix.HystrixCommand`2.Finalize*
  commentId: Overload:NHystrix.HystrixCommand`2.Finalize
  isExternal: false
  name: Finalize
  nameWithType: HystrixCommand<TRequest, TResult>.Finalize
  fullName: NHystrix.HystrixCommand<TRequest, TResult>.Finalize
  nameWithType.vb: HystrixCommand(Of TRequest, TResult).Finalize
  fullName.vb: NHystrix.HystrixCommand(Of TRequest, TResult).Finalize
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
