{
  "api/NHystrix.Metric.IHystrixEventStream-1.html": {
    "href": "api/NHystrix.Metric.IHystrixEventStream-1.html",
    "title": "Interface IHystrixEventStream<E> | NHystrix",
    "keywords": "Interface IHystrixEventStream<E> Interface implemented by all event streams Namespace : NHystrix.Metric Assembly : NHystrix.dll Syntax public interface IHystrixEventStream<E> where E : IHystrixEvent Type Parameters Name Description E Methods | Improve this Doc View Source Observe() Returns an System.IObservable<T> for subscribing to the event stream. Declaration IObservable<E> Observe() Returns Type Description System.IObservable <E> IObservable<E>."
  },
  "api/NHystrix.html": {
    "href": "api/NHystrix.html",
    "title": "Namespace NHystrix | NHystrix",
    "keywords": "Namespace NHystrix Classes CircuitBreakerOptions Configuration options for a HystrixCircuitBreaker . HealthCounts Encapsulates health related statistics sent to the HealthStream of a HystrixCommandMetric. HystrixBulkhead Encapsulates the bulkhead semaphore for a HystrixCommand with the given HystrixCommandKey. HystrixCircuitBreaker The default production implementation of IHystrixCircuitBreaker . HystrixCommand<TRequest, TResult> Base class for all HystrixCommands. Providing functionality for: Bulkhead Pattern Timeout Circuit Breaker Pattern Fallback responses HystrixCommandMetrics Tracks metrics for a HystrixCommand<TRequest, TResult> for a HystrixCommandKey . HystrixCommandProperties Configuration properties for HystrixCommand<TRequest, TResult> and related components. HystrixDelegatingHandler A System.Net.Http.DelegatingHandler that wraps the request in the Circuit Breaker Pattern and Bulkhead Pattern. Similar functionality to the HystrixCommand<TRequest, TResult> , but timeouts are handled by System.Net.Http.HttpClient directly. HystrixEventType The type of an event emitted by a HystrixCommand<TRequest, TResult> to HystrixMetrics . This class cannot be inherited. HystrixMetrics Base class for implementing a metric within NHystrix. TaskExtensions Extension methods for System.Threading.Tasks.Task Structs HystrixCommandGroup A HystrixCommandGroup is used to group commands together. For example, by service or resource. HystrixCommandKey A HystrixCommandKey is used to identify a specific command within a group. This key is used as the caching key for metrics, etc. Interfaces IHystrixCircuitBreaker Circuit breaker logic that is hooked into HystrixCommand<TRequest, TResult> execution and will stop allowing executions if failures have gone past the defined threshold. The default (and only) implementation will then allow a single retry after a defined sleepWindow until the execution succeeds at which point it will again close the circuit and allow executions again. IHystrixCommand<TRequest, TResult> Interface implemented by HystrixCommand<TRequest, TResult> s."
  },
  "articles/using-the-hystrixdelegatinghander.html": {
    "href": "articles/using-the-hystrixdelegatinghander.html",
    "title": "Using the HystrixDelegatingHandler | NHystrix",
    "keywords": "Using the HystrixDelegatingHandler Overview The HystrixDelegatingHandler provides circuit breaker, bulkhead, and metrics support to HttpClient. This handler would typically be the first in the pipeline: RetryDelegatingHandler retryHandler = new RetryDelegatingHandler { InnerHandler = new HttpClientHandler() }; HystrixDelegatingHandler hystrixHandler = new HystrixDelegatingHandler(commandKey, properties, retryHandler); HttpClient httpClient = new HttpClient(hystrixHandler); Timeouts The HystrixDelegatingHandler does not manage timeouts directly. Instead, use the HttpClient.Timeout property. When the defined timeout expires, HystrixDelegatingHandler will intercept the timeout and handle it appropriately. httpClient.Timeout = TimeSpan.FromMilliseconds(properties.ExecutionTimeoutInMilliseconds); HTTP Status Codes Failures are counted and emitted for: Status Reason HystrixEvent Comments 408 Request Timeout HystrixEventType.TIMEOUT 504 Gateway Timeout HystrixEventType.TIMEOUT 403 Forbidden HystrixEventType.FAILURE Some APIs, such as GitHub, return a 403 when a rate limit is reached 429 Too Many Requests HystrixEventType.FAILURE Proposed rate-limit status code. See RFC 6585 >=500 Server Errors HystrixEventType.FAILURE All server side errors Http 400 Bad Requests are not counted against failures but do emit a HystrixEventType.BAD_REQUEST . All other Http Status codes are ignored by NHystrix. Exceptions and Fallback Like the HystrixCommand , the HystrixDelegatingHandler does not throw an exception on error nor does is allow exceptions to propagate up the stack. Rather, it relies on the fallback implementation to handle error situations. By default, when fallback is enabled, an HttpResponseMessage with a status code of [204 No Content] will be returned and HystrixEventType.FALLBACK_MISSING emitted if no fallback function is provided. If fallback is disabled, exceptions will be bubbled up as in a typical message handler. Short-circuits and Semaphore-Rejections will return a [204 No Content]."
  },
  "index.html": {
    "href": "index.html",
    "title": "NHystrix | NHystrix",
    "keywords": "NHystrix What is NHystrix NHystrix is inspired by the Netflix/Hystrix project to provide similar functionality and resilience to C#/.Net based services and clients. The Hystrix Wiki is worth a read to understand what challenges N/Hystrix aims to solve. The current release provides... Circuit Breaker Pattern ( https://docs.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker ) Bulkhead Pattern ( https://docs.microsoft.com/en-us/azure/architecture/patterns/bulkhead ) Timeouts ...functionality. What it is NOT Due to language and feature differences between Java and C#/.Net, this is NOT a direct port. If you are familiar with Hystrix, you'll recognize similarities in API and structure, but also see that NHystrix arrives at the end goal a bit differently. For example, rather than the interfaces working with Reactive Extensions futures and promises, they support C# async/await. Quick Start Install the NuGet package to your project Packages can be found at: https://www.nuget.org/packages/NHystrix/ Powershell CLI Install-Package NHystrix dotnet add package NHystrix Create a command class public class GreeterCommand : HystrixCommand<string> { string greeter; public GreeterCommand(string greeter, HystrixCommandProperties properties) : base(new HystrixCommandKey(\"Test\", new HystrixCommandGroup(\"TestGroup\")), properties) { this.greeter = greeter; } protected override Task<string> RunAsync() { return Task.FromResult($\"Hello, {greeter}!\"); } protected override string OnHandleFallback() { return \"Hello World!\"; } } Execute your command var properties = new HystrixCommandProperties() { FallbackEnabled = true }; var cmd = new GreeterCommand(\"Bob\", properties); string s = await cmd.ExecuteAsync() Output: Hello, Bob!"
  },
  "api/NHystrix.HystrixCommandProperties.html": {
    "href": "api/NHystrix.HystrixCommandProperties.html",
    "title": "Class HystrixCommandProperties | NHystrix",
    "keywords": "Class HystrixCommandProperties Configuration properties for HystrixCommand<TRequest, TResult> and related components. Inheritance System.Object HystrixCommandProperties Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NHystrix Assembly : NHystrix.dll Syntax public class HystrixCommandProperties Properties | Improve this Doc View Source BulkheadingEnabled Gets or sets a value indicating whether [bulkheading enabled]. Default is true. Declaration public bool BulkheadingEnabled { get; set; } Property Value Type Description System.Boolean true if [bulkheading enabled]; otherwise, false . Default is true. | Improve this Doc View Source BulkheadSemaphoreAcquireTimeoutInMilliseconds The amount of time bulkheading should wait to acquire a semaphore, in milliseconds, before returning any fallback responses. Default is 1. Declaration public int BulkheadSemaphoreAcquireTimeoutInMilliseconds { get; set; } Property Value Type Description System.Int32 The bulkhead semaphore acquire timeout in milliseconds. Default is 1. | Improve this Doc View Source CircuitBreakerEnabled Gets or sets a value indicating whether [circuit breaker enabled]. Default is true. Declaration public bool CircuitBreakerEnabled { get; set; } Property Value Type Description System.Boolean true if [circuit breaker enabled]; otherwise, false . Default is true. | Improve this Doc View Source CircuitBreakerOptions Gets or sets the circuit breaker options. Declaration public CircuitBreakerOptions CircuitBreakerOptions { get; set; } Property Value Type Description CircuitBreakerOptions The circuit breaker options. | Improve this Doc View Source ExecutionTimeoutInMilliseconds Gets or sets the execution timeout in milliseconds. Default is 1000. Declaration public int ExecutionTimeoutInMilliseconds { get; set; } Property Value Type Description System.Int32 The execution timeout in milliseconds. Default is 1000. | Improve this Doc View Source FallbackEnabled Gets or sets a value indicating whether [fallback enabled]. Default is false. Declaration public bool FallbackEnabled { get; set; } Property Value Type Description System.Boolean true if [fallback enabled]; otherwise, false . Default is false. | Improve this Doc View Source MaxConcurrentRequests Gets or sets the maximum concurrent requests. Default is 10. Declaration public int MaxConcurrentRequests { get; set; } Property Value Type Description System.Int32 The maximum concurrent requests. Default is 10. | Improve this Doc View Source MetricsRollingStatisticalWindowBuckets Gets or sets the metrics rolling statistical window buckets. Default is 10. Declaration public int MetricsRollingStatisticalWindowBuckets { get; set; } Property Value Type Description System.Int32 The metrics rolling statistical window buckets. Default is 10. | Improve this Doc View Source MetricsRollingStatisticalWindowInMilliseconds Gets or sets the metrics rolling statistical window in milliseconds. Default is 1000. Declaration public int MetricsRollingStatisticalWindowInMilliseconds { get; set; } Property Value Type Description System.Int32 The metrics rolling statistical window in milliseconds. Default is 1000. | Improve this Doc View Source TimeoutEnabled Whether timeout should be triggered. Default is true. Declaration public bool TimeoutEnabled { get; set; } Property Value Type Description System.Boolean true if [timeout enabled]; otherwise, false . Default is true."
  },
  "api/NHystrix.HystrixMetrics.html": {
    "href": "api/NHystrix.HystrixMetrics.html",
    "title": "Class HystrixMetrics | NHystrix",
    "keywords": "Class HystrixMetrics Base class for implementing a metric within NHystrix. Inheritance System.Object HystrixMetrics HystrixCommandMetrics Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NHystrix Assembly : NHystrix.dll Syntax public abstract class HystrixMetrics Constructors | Improve this Doc View Source HystrixMetrics(HystrixRollingNumber) Initializes a new instance of the HystrixMetrics class. Declaration protected HystrixMetrics(HystrixRollingNumber counter) Parameters Type Name Description HystrixRollingNumber counter The counter. Methods | Improve this Doc View Source GetCumulativeCount(HystrixEventType) Get the cumulative count since the start of the application for the given HystrixEventType Declaration public long GetCumulativeCount(HystrixEventType eventType) Parameters Type Name Description HystrixEventType eventType Type of the event. Returns Type Description System.Int64 long cumulative count | Improve this Doc View Source GetRollingCount(HystrixEventType) Get the rolling count for the given HystrixEventType . Declaration public long GetRollingCount(HystrixEventType eventType) Parameters Type Name Description HystrixEventType eventType Type of the event. Returns Type Description System.Int64 long rolling count | Improve this Doc View Source Reset() Resets this instance. Declaration public void Reset()"
  },
  "api/NHystrix.IHystrixCommand-2.html": {
    "href": "api/NHystrix.IHystrixCommand-2.html",
    "title": "Interface IHystrixCommand<TRequest, TResult> | NHystrix",
    "keywords": "Interface IHystrixCommand<TRequest, TResult> Interface implemented by HystrixCommand<TRequest, TResult> s. Namespace : NHystrix Assembly : NHystrix.dll Syntax public interface IHystrixCommand<TRequest, TResult> Type Parameters Name Description TRequest The type of the request. TResult The type of the result. Methods | Improve this Doc View Source Execute(TRequest) Executes the command. Declaration TResult Execute(TRequest request = null) Parameters Type Name Description TRequest request Returns Type Description TResult TResult. | Improve this Doc View Source ExecuteAsync(TRequest) Executes the command. Declaration Task<TResult> ExecuteAsync(TRequest request = null) Parameters Type Name Description TRequest request Returns Type Description System.Threading.Tasks.Task <TResult> Task<TResult>."
  },
  "api/NHystrix.Metric.IHystrixEvent.html": {
    "href": "api/NHystrix.Metric.IHystrixEvent.html",
    "title": "Interface IHystrixEvent | NHystrix",
    "keywords": "Interface IHystrixEvent Marker interface for events which may appear in an event stream Namespace : NHystrix.Metric Assembly : NHystrix.dll Syntax public interface IHystrixEvent"
  },
  "api/NHystrix.CircuitBreakerOptions.html": {
    "href": "api/NHystrix.CircuitBreakerOptions.html",
    "title": "Class CircuitBreakerOptions | NHystrix",
    "keywords": "Class CircuitBreakerOptions Configuration options for a HystrixCircuitBreaker . Inheritance System.Object CircuitBreakerOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NHystrix Assembly : NHystrix.dll Syntax public class CircuitBreakerOptions Properties | Improve this Doc View Source CircuitBreakerErrorThresholdPercentage Gets or sets the circuit breaker error threshold percentage. Default is 50. Declaration public int CircuitBreakerErrorThresholdPercentage { get; set; } Property Value Type Description System.Int32 The circuit breaker error threshold percentage. Default is 50. | Improve this Doc View Source CircuitBreakerForceClosed Gets or sets a value indicating whether [circuit breaker force closed]. Default is false. Declaration public bool CircuitBreakerForceClosed { get; set; } Property Value Type Description System.Boolean true if [circuit breaker force closed]; otherwise, false . Default is false. | Improve this Doc View Source CircuitBreakerForceOpen Gets or sets a value indicating whether [circuit breaker force open]. Default is false. Declaration public bool CircuitBreakerForceOpen { get; set; } Property Value Type Description System.Boolean true if [circuit breaker force open]; otherwise, false . Default is false. | Improve this Doc View Source CircuitBreakerRequestVolumeThreshold Number of requests that must be made within a statisticalWindow before open/close decisions are made using stats. Default is 20. Declaration public int CircuitBreakerRequestVolumeThreshold { get; set; } Property Value Type Description System.Int32 The circuit breaker request volume threshold. Default is 20. | Improve this Doc View Source CircuitBreakerSleepWindowInMilliseconds Gets or sets the circuit breaker sleep window in milliseconds. Default is 5000. Declaration public long CircuitBreakerSleepWindowInMilliseconds { get; set; } Property Value Type Description System.Int64 The circuit breaker sleep window in milliseconds. Default is 5000."
  },
  "api/NHystrix.Exceptions.html": {
    "href": "api/NHystrix.Exceptions.html",
    "title": "Namespace NHystrix.Exceptions | NHystrix",
    "keywords": "Namespace NHystrix.Exceptions Classes HystrixBadRequestException An exception representing an error with provided arguments or state rather than an execution failure. Unlike all other exceptions thrown by a HystrixCommand<TRequest, TResult> this will not trigger fallback, not count against failure metrics and thus not trigger the circuit breaker. Important NOTE: This should only be used when an error is due to user input such as System.ArgumentException otherwise it defeats the purpose of fault-tolerance and fallback behavior. HystrixFailureException Class HystrixFailureException. HystrixFallbackException Thrown when a fallback attempt fails. HystrixRuntimeException Base class for all NHystrix exceptions that occur as part of command execution. You can catch this exception to catch all exceptions thrown my Hystrix that are not bad requests. HystrixTimeoutException Thrown when a HystrixCommand<TRequest, TResult> or HystrixDelegatingHandler times out. Enums FailureType Enum FailureType"
  },
  "api/NHystrix.HealthCounts.html": {
    "href": "api/NHystrix.HealthCounts.html",
    "title": "Class HealthCounts | NHystrix",
    "keywords": "Class HealthCounts Encapsulates health related statistics sent to the HealthStream of a HystrixCommandMetric. Inheritance System.Object HealthCounts Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NHystrix Assembly : NHystrix.dll Syntax public class HealthCounts Properties | Improve this Doc View Source FailedRequestCount The number of failed requests within the reporting window. Declaration public long FailedRequestCount { get; set; } Property Value Type Description System.Int64 The failed request count. | Improve this Doc View Source FailurePercentage The failure percentage as a whole number. Declaration public int FailurePercentage { get; } Property Value Type Description System.Int32 The failure percentage as a whole number. Remarks In the HystrixCircuitBreaker , this is the value compared to the CircuitBreakerErrorThresholdPercentage to determine if the circuit breaker should be tripped. | Improve this Doc View Source RequestCount The total number of attempted requests within the reporting window. Declaration public long RequestCount { get; set; } Property Value Type Description System.Int64 The request count. Remarks In the HystrixCircuitBreaker , this is the value compared to the CircuitBreakerRequestVolumeThreshold to ensure we've met the minimum number of requests before evaluating the failure percentage."
  },
  "api/NHystrix.HystrixCommandMetrics.html": {
    "href": "api/NHystrix.HystrixCommandMetrics.html",
    "title": "Class HystrixCommandMetrics | NHystrix",
    "keywords": "Class HystrixCommandMetrics Tracks metrics for a HystrixCommand<TRequest, TResult> for a HystrixCommandKey . Inheritance System.Object HystrixMetrics HystrixCommandMetrics Inherited Members HystrixMetrics.GetCumulativeCount(HystrixEventType) HystrixMetrics.GetRollingCount(HystrixEventType) HystrixMetrics.Reset() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NHystrix Assembly : NHystrix.dll Syntax public class HystrixCommandMetrics : HystrixMetrics Properties | Improve this Doc View Source CommandGroup Gets the command group. Declaration public HystrixCommandGroup CommandGroup { get; } Property Value Type Description HystrixCommandGroup The command group. | Improve this Doc View Source CommandKey Gets the command key. Declaration public HystrixCommandKey CommandKey { get; } Property Value Type Description HystrixCommandKey The command key. | Improve this Doc View Source HealthStream Gets the health stream. Declaration public IObservable<HealthCounts> HealthStream { get; } Property Value Type Description System.IObservable < HealthCounts > The health stream. Methods | Improve this Doc View Source GetInstance(HystrixCommandKey, HystrixCommandProperties) Gets a singleton instance. Declaration public static HystrixCommandMetrics GetInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties) Parameters Type Name Description HystrixCommandKey commandKey The command key. HystrixCommandProperties properties The properties. Returns Type Description HystrixCommandMetrics HystrixCommandMetrics. See Also HystrixMetrics"
  },
  "api/NHystrix.IHystrixCircuitBreaker.html": {
    "href": "api/NHystrix.IHystrixCircuitBreaker.html",
    "title": "Interface IHystrixCircuitBreaker | NHystrix",
    "keywords": "Interface IHystrixCircuitBreaker Circuit breaker logic that is hooked into HystrixCommand<TRequest, TResult> execution and will stop allowing executions if failures have gone past the defined threshold. The default (and only) implementation will then allow a single retry after a defined sleepWindow until the execution succeeds at which point it will again close the circuit and allow executions again. Namespace : NHystrix Assembly : NHystrix.dll Syntax public interface IHystrixCircuitBreaker Properties | Improve this Doc View Source IsOpen Whether the circuit is currently open (tripped). Declaration bool IsOpen { get; } Property Value Type Description System.Boolean boolean state of circuit breaker | Improve this Doc View Source ShouldAllowRequest Every HystrixCommand<TRequest, TResult> request asks this if it is allowed to proceed or not. It is idempotent and does not modify any internal state, and takes into account the half-open logic which allows some requests through after the circuit has been opened Declaration bool ShouldAllowRequest { get; } Property Value Type Description System.Boolean boolean whether a request should be permitted | Improve this Doc View Source ShouldAttemptExecution Invoked at start of command execution to attempt an execution. This is non-idempotent - it may modify internal state. Declaration bool ShouldAttemptExecution { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source MarkNonSuccess() Invoked on unsuccessful executions from HystrixCommand<TRequest, TResult> as part of feedback mechanism when in a half-open state. Declaration void MarkNonSuccess() | Improve this Doc View Source MarkSuccess() Invoked on successful executions from HystrixCommand<TRequest, TResult> as part of feedback mechanism when in a half-open state. Declaration void MarkSuccess() | Improve this Doc View Source Trip() Trips the circuit breaker and begins the sleep window. Declaration void Trip()"
  },
  "api/NHystrix.Metric.HystrixRollingNumber.html": {
    "href": "api/NHystrix.Metric.HystrixRollingNumber.html",
    "title": "Class HystrixRollingNumber | NHystrix",
    "keywords": "Class HystrixRollingNumber A number which can be used to track counters (increment) or set values over time. It is \"rolling\" in the sense that a 'timeInMilliseconds' is given that you want to track (such as 10 seconds) and then that is broken into buckets (defaults to 10) so that the 10 second window doesn't empty out and restart every 10 seconds, but instead every 1 second you have a new bucket added and one dropped so that 9 of the buckets remain and only the newest starts from scratch. This is done so that the statistics are gathered over a rolling 10 second window with data being added/dropped in 1 second intervals(or whatever granularity is defined by the arguments) rather than each 10 second window starting at 0 again. Performance-wise this class is optimized for writes, not reads. This is done because it expects far higher write volume (thousands/second) than reads (a few per second). For example, on each read to getSum/getCount it will iterate buckets to sum the data so that on writes we don't need to maintain the overall sum and pay the synchronization cost at each write to ensure the sum is up-to-date when the read can easily iterate each bucket to get the sum when it needs it. See UnitTest for usage and expected behavior examples. Inheritance System.Object HystrixRollingNumber Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NHystrix.Metric Assembly : NHystrix.dll Syntax public class HystrixRollingNumber Remarks Thread Safety This class is thread-safe. Constructors | Improve this Doc View Source HystrixRollingNumber(Int32, Int32) Initializes a new instance of the HystrixRollingNumber class. Declaration public HystrixRollingNumber(int timeInMilliseconds, int numberOfBuckets) Parameters Type Name Description System.Int32 timeInMilliseconds Length of time in milliseconds to report metrics over. System.Int32 numberOfBuckets The number of buckets. Methods | Improve this Doc View Source Add(HystrixEventType, Int64) Adds to the counter for the specified HystrixEventType . Declaration public void Add(HystrixEventType eventType, long value) Parameters Type Name Description HystrixEventType eventType Type of the event. System.Int64 value The value. | Improve this Doc View Source GetCumulativeSum(HystrixEventType) Get the cumulative sum of all buckets ever since the JVM started without rolling for the given HystrixEventType . Declaration public long GetCumulativeSum(HystrixEventType eventType) Parameters Type Name Description HystrixEventType eventType Type of the event. Returns Type Description System.Int64 System.Int64. | Improve this Doc View Source GetRollingMaxValue(HystrixEventType) Get the max value of values in all buckets for the given HystrixEventType . Declaration public long GetRollingMaxValue(HystrixEventType eventType) Parameters Type Name Description HystrixEventType eventType Type of the event. Returns Type Description System.Int64 System.Int64. Exceptions Type Condition System.NotImplementedException | Improve this Doc View Source GetRollingSum(HystrixEventType) Get the sum of all buckets in the rolling counter for the given HystrixEventType . Declaration public long GetRollingSum(HystrixEventType eventType) Parameters Type Name Description HystrixEventType eventType Type of the event. Returns Type Description System.Int64 System.Int64. | Improve this Doc View Source GetValueOfLatestBucket(HystrixEventType) Get the value of the latest (current) bucket in the rolling counter for the given HystrixEventType . Declaration public long GetValueOfLatestBucket(HystrixEventType eventType) Parameters Type Name Description HystrixEventType eventType Type of the event. Returns Type Description System.Int64 System.Int64. | Improve this Doc View Source GetValues(HystrixEventType) Get an array of values for all buckets in the rolling counter for the given HystrixEventType . Declaration public long[] GetValues(HystrixEventType eventType) Parameters Type Name Description HystrixEventType eventType Type of the event. Returns Type Description System.Int64 [] System.Int64[]. | Improve this Doc View Source Increment(HystrixEventType) Increments the counter for the specified HystrixEventType . Declaration public void Increment(HystrixEventType eventType) Parameters Type Name Description HystrixEventType eventType Type of the event. | Improve this Doc View Source Reset() Force a reset of all rolling counters (clear all buckets) so that statistics start being gathered from scratch. This does NOT reset the CumulativeSum values. Declaration public void Reset() | Improve this Doc View Source UpdateRollingMax(HystrixEventType, Int64) Update a value and retain the max value for the specified HystrixEventType . Declaration public void UpdateRollingMax(HystrixEventType eventType, long value) Parameters Type Name Description HystrixEventType eventType Type of the event. System.Int64 value The value. Exceptions Type Condition System.NotImplementedException"
  },
  "api/NHystrix.Exceptions.HystrixBadRequestException.html": {
    "href": "api/NHystrix.Exceptions.HystrixBadRequestException.html",
    "title": "Class HystrixBadRequestException | NHystrix",
    "keywords": "Class HystrixBadRequestException An exception representing an error with provided arguments or state rather than an execution failure. Unlike all other exceptions thrown by a HystrixCommand<TRequest, TResult> this will not trigger fallback, not count against failure metrics and thus not trigger the circuit breaker. Important NOTE: This should only be used when an error is due to user input such as System.ArgumentException otherwise it defeats the purpose of fault-tolerance and fallback behavior. Inheritance System.Object System.Exception HystrixBadRequestException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NHystrix.Exceptions Assembly : NHystrix.dll Syntax public class HystrixBadRequestException : Exception, ISerializable Constructors | Improve this Doc View Source HystrixBadRequestException() Initializes a new instance of the HystrixBadRequestException class. Declaration public HystrixBadRequestException() | Improve this Doc View Source HystrixBadRequestException(SerializationInfo, StreamingContext) Initializes a new instance of the HystrixBadRequestException class. Declaration protected HystrixBadRequestException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source HystrixBadRequestException(String) Initializes a new instance of the HystrixBadRequestException class. Declaration public HystrixBadRequestException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source HystrixBadRequestException(String, Exception) Initializes a new instance of the HystrixBadRequestException class. Declaration public HystrixBadRequestException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable See Also System.Exception"
  },
  "api/NHystrix.Exceptions.HystrixRuntimeException.html": {
    "href": "api/NHystrix.Exceptions.HystrixRuntimeException.html",
    "title": "Class HystrixRuntimeException | NHystrix",
    "keywords": "Class HystrixRuntimeException Base class for all NHystrix exceptions that occur as part of command execution. You can catch this exception to catch all exceptions thrown my Hystrix that are not bad requests. Inheritance System.Object System.Exception HystrixRuntimeException HystrixFailureException HystrixTimeoutException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NHystrix.Exceptions Assembly : NHystrix.dll Syntax public class HystrixRuntimeException : Exception, ISerializable Constructors | Improve this Doc View Source HystrixRuntimeException() Initializes a new instance of the HystrixRuntimeException class. Declaration public HystrixRuntimeException() | Improve this Doc View Source HystrixRuntimeException(SerializationInfo, StreamingContext) Initializes a new instance of the HystrixRuntimeException class. Declaration protected HystrixRuntimeException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source HystrixRuntimeException(String) Initializes a new instance of the HystrixRuntimeException class. Declaration public HystrixRuntimeException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source HystrixRuntimeException(String, Exception) Initializes a new instance of the HystrixRuntimeException class. Declaration public HystrixRuntimeException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable See Also System.Exception"
  },
  "api/NHystrix.HystrixBulkhead.html": {
    "href": "api/NHystrix.HystrixBulkhead.html",
    "title": "Class HystrixBulkhead | NHystrix",
    "keywords": "Class HystrixBulkhead Encapsulates the bulkhead semaphore for a HystrixCommand with the given HystrixCommandKey. Inheritance System.Object HystrixBulkhead Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NHystrix Assembly : NHystrix.dll Syntax public class HystrixBulkhead : IDisposable Properties | Improve this Doc View Source CommandKey Gets the command key. Declaration public HystrixCommandKey CommandKey { get; } Property Value Type Description HystrixCommandKey The command key. Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc View Source Finalize() Finalizes an instance of the HystrixBulkhead class. Declaration protected void Finalize() | Improve this Doc View Source GetInstance(HystrixCommandKey, HystrixCommandProperties) Gets the instance. Declaration public static HystrixBulkhead GetInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties) Parameters Type Name Description HystrixCommandKey commandKey The command key. HystrixCommandProperties properties The properties. Returns Type Description HystrixBulkhead HystrixBulkhead. | Improve this Doc View Source Release() Releases the semaphore. Declaration public int Release() Returns Type Description System.Int32 The number of semaphores released. -1 if bulkheading is disabled. | Improve this Doc View Source Try() Tries to obtain a semaphore. Declaration public bool Try() Returns Type Description System.Boolean true if successful or bulkheading is disabled, false otherwise. Implements System.IDisposable See Also System.IDisposable"
  },
  "api/NHystrix.Metric.HystrixCommandEventStream.html": {
    "href": "api/NHystrix.Metric.HystrixCommandEventStream.html",
    "title": "Class HystrixCommandEventStream | NHystrix",
    "keywords": "Class HystrixCommandEventStream Per-Command stream of HystrixCommandEvent s. Inheritance System.Object HystrixCommandEventStream Implements IHystrixEventStream < HystrixCommandEvent > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NHystrix.Metric Assembly : NHystrix.dll Syntax public class HystrixCommandEventStream : IHystrixEventStream<HystrixCommandEvent> Properties | Improve this Doc View Source CommandKey Gets the command key. Declaration public HystrixCommandKey CommandKey { get; } Property Value Type Description HystrixCommandKey The command key. Methods | Improve this Doc View Source GetInstance(HystrixCommandKey) Gets a Singleton instance for the specified commandKey . Declaration public static HystrixCommandEventStream GetInstance(HystrixCommandKey commandKey) Parameters Type Name Description HystrixCommandKey commandKey The command key. Returns Type Description HystrixCommandEventStream HystrixCommandStartStream. Remarks This is thread-safe and ensures only 1 HystrixCommandEventStream per commandKey . Exceptions Type Condition System.Collections.Generic.KeyNotFoundException If an instance for commandKey could not be found and one could not be created. In theory, this should never get thrown. | Improve this Doc View Source Observe() Returns an System.IObservable<T> for subscribing to the event stream. Declaration public IObservable<HystrixCommandEvent> Observe() Returns Type Description System.IObservable < HystrixCommandEvent > IObservable<HystrixCommandExecutionStarted>. | Improve this Doc View Source ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String The name of the scream and CommandKey it's for in the form of \"HystrixCommandStartStream({CommandKey})\". Overrides System.Object.ToString() Implements IHystrixEventStream<E> See Also IHystrixEventStream <E>"
  },
  "api/NHystrix.Metric.html": {
    "href": "api/NHystrix.Metric.html",
    "title": "Namespace NHystrix.Metric | NHystrix",
    "keywords": "Namespace NHystrix.Metric Classes HystrixCommandEvent Encapsulates and event that occurred as a result of executing a HystrixCommand<TRequest, TResult> . HystrixCommandEventStream Per-Command stream of HystrixCommandEvent s. HystrixRollingNumber A number which can be used to track counters (increment) or set values over time. It is \"rolling\" in the sense that a 'timeInMilliseconds' is given that you want to track (such as 10 seconds) and then that is broken into buckets (defaults to 10) so that the 10 second window doesn't empty out and restart every 10 seconds, but instead every 1 second you have a new bucket added and one dropped so that 9 of the buckets remain and only the newest starts from scratch. This is done so that the statistics are gathered over a rolling 10 second window with data being added/dropped in 1 second intervals(or whatever granularity is defined by the arguments) rather than each 10 second window starting at 0 again. Performance-wise this class is optimized for writes, not reads. This is done because it expects far higher write volume (thousands/second) than reads (a few per second). For example, on each read to getSum/getCount it will iterate buckets to sum the data so that on writes we don't need to maintain the overall sum and pay the synchronization cost at each write to ensure the sum is up-to-date when the read can easily iterate each bucket to get the sum when it needs it. See UnitTest for usage and expected behavior examples. Interfaces IHystrixEvent Marker interface for events which may appear in an event stream IHystrixEventStream<E> Interface implemented by all event streams"
  },
  "api/NHystrix.TaskExtensions.html": {
    "href": "api/NHystrix.TaskExtensions.html",
    "title": "Class TaskExtensions | NHystrix",
    "keywords": "Class TaskExtensions Extension methods for System.Threading.Tasks.Task Inheritance System.Object TaskExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NHystrix Assembly : NHystrix.dll Syntax public static class TaskExtensions Methods | Improve this Doc View Source WithTimeout<TResult>(Task<TResult>, Int32) Execute the task with the specified timeout. Declaration public static Task<TResult> WithTimeout<TResult>(this Task<TResult> task, int timeoutInMilliseconds) Parameters Type Name Description System.Threading.Tasks.Task <TResult> task The task. System.Int32 timeoutInMilliseconds The timeout in milliseconds. Returns Type Description System.Threading.Tasks.Task <TResult> Task<TResult>. Type Parameters Name Description TResult The type of the t result. Exceptions Type Condition System.TimeoutException"
  },
  "api/NHystrix.Exceptions.FailureType.html": {
    "href": "api/NHystrix.Exceptions.FailureType.html",
    "title": "Enum FailureType | NHystrix",
    "keywords": "Enum FailureType Enum FailureType Namespace : NHystrix.Exceptions Assembly : NHystrix.dll Syntax public enum FailureType Fields Name Description BAD_REQUEST_EXCEPTION The bad request exception COMMAND_EXCEPTION The command exception REJECTED_SEMAPHORE_EXECUTION The failure was the result of a bulkhead semaphore not being obtained before the BulkheadSemaphoreAcquireTimeoutInMilliseconds . REJECTED_SEMAPHORE_FALLBACK The rejected semaphore fallback REJECTED_THREAD_EXECUTION The rejected thread execution SHORTCIRCUIT The failure was the result of the circuit breaker being open. TIMEOUT The timeout"
  },
  "api/NHystrix.Exceptions.HystrixTimeoutException.html": {
    "href": "api/NHystrix.Exceptions.HystrixTimeoutException.html",
    "title": "Class HystrixTimeoutException | NHystrix",
    "keywords": "Class HystrixTimeoutException Thrown when a HystrixCommand<TRequest, TResult> or HystrixDelegatingHandler times out. Inheritance System.Object System.Exception HystrixRuntimeException HystrixTimeoutException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NHystrix.Exceptions Assembly : NHystrix.dll Syntax public class HystrixTimeoutException : HystrixRuntimeException, ISerializable Constructors | Improve this Doc View Source HystrixTimeoutException() Initializes a new instance of the HystrixTimeoutException class. Declaration public HystrixTimeoutException() | Improve this Doc View Source HystrixTimeoutException(SerializationInfo, StreamingContext) Initializes a new instance of the HystrixTimeoutException class. Declaration protected HystrixTimeoutException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The information. System.Runtime.Serialization.StreamingContext context The context. | Improve this Doc View Source HystrixTimeoutException(String) Initializes a new instance of the HystrixTimeoutException class. Declaration public HystrixTimeoutException(string message) Parameters Type Name Description System.String message The message. | Improve this Doc View Source HystrixTimeoutException(String, Exception) Initializes a new instance of the HystrixTimeoutException class. Declaration public HystrixTimeoutException(string message, Exception innerException) Parameters Type Name Description System.String message The message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable See Also HystrixRuntimeException"
  },
  "api/NHystrix.HystrixCircuitBreaker.html": {
    "href": "api/NHystrix.HystrixCircuitBreaker.html",
    "title": "Class HystrixCircuitBreaker | NHystrix",
    "keywords": "Class HystrixCircuitBreaker The default production implementation of IHystrixCircuitBreaker . Inheritance System.Object HystrixCircuitBreaker Implements IHystrixCircuitBreaker Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NHystrix Assembly : NHystrix.dll Syntax public class HystrixCircuitBreaker : IHystrixCircuitBreaker Properties | Improve this Doc View Source IsOpen Whether the circuit is currently open (tripped). Declaration public bool IsOpen { get; } Property Value Type Description System.Boolean true if the circuit breaker is open, false otherwise. | Improve this Doc View Source ShouldAllowRequest Every HystrixCommand<TRequest, TResult> requests asks this if it is allowed to proceed or not. It is idempotent and does not modify any internal state, and takes into account the half-open logic which allows some requests through after the circuit has been opened. Declaration public bool ShouldAllowRequest { get; } Property Value Type Description System.Boolean true if the request should be allowed, false otherwise. | Improve this Doc View Source ShouldAttemptExecution Invoked at start of command execution to attempt an execution. This is non-idempotent - it may modify internal state. Declaration public bool ShouldAttemptExecution { get; } Property Value Type Description System.Boolean true if execution can be attempted, false otherwise. Methods | Improve this Doc View Source GetInstance(HystrixCommandKey, CircuitBreakerOptions, HystrixCommandMetrics) Get the IHystrixCircuitBreaker instance for a given key. Declaration public static IHystrixCircuitBreaker GetInstance(HystrixCommandKey commandKey, CircuitBreakerOptions properties, HystrixCommandMetrics metrics) Parameters Type Name Description HystrixCommandKey commandKey The HystrixCommandKey for the command using this circuit breaker. CircuitBreakerOptions properties The HystrixCommandProperties for the command using this circuit breaker. HystrixCommandMetrics metrics The HystrixCommandMetrics for the command using this circuit breaker. Returns Type Description IHystrixCircuitBreaker A singleton instance of IHystrixCircuitBreaker for the given HystrixCommandKey | Improve this Doc View Source MarkNonSuccess() Invoked on unsuccessful executions from HystrixCommand<TRequest, TResult> as part of feedback mechanism when in a half-open state. Declaration public void MarkNonSuccess() | Improve this Doc View Source MarkSuccess() Invoked on successful executions from HystrixCommand<TRequest, TResult> as part of feedback mechanism when in a half-open state. Declaration public void MarkSuccess() | Improve this Doc View Source Trip() Trips the circuit breaker. Declaration public void Trip() Implements IHystrixCircuitBreaker See Also IHystrixCircuitBreaker"
  },
  "api/NHystrix.HystrixCommandKey.html": {
    "href": "api/NHystrix.HystrixCommandKey.html",
    "title": "Struct HystrixCommandKey | NHystrix",
    "keywords": "Struct HystrixCommandKey A HystrixCommandKey is used to identify a specific command within a group. This key is used as the caching key for metrics, etc. Implements System.IEquatable < HystrixCommandKey > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NHystrix Assembly : NHystrix.dll Syntax public struct HystrixCommandKey : IEquatable<HystrixCommandKey> Constructors | Improve this Doc View Source HystrixCommandKey(String, HystrixCommandGroup) Initializes a new instance of the HystrixCommandKey struct. Declaration public HystrixCommandKey(string name, HystrixCommandGroup group) Parameters Type Name Description System.String name The name of this command. HystrixCommandGroup group The HystrixCommandGroup to which this command belongs. Exceptions Type Condition System.ArgumentException Invalid argument. name cannot be null or empty. - name Properties | Improve this Doc View Source Group Gets the group. Declaration public HystrixCommandGroup Group { get; } Property Value Type Description HystrixCommandGroup The group. | Improve this Doc View Source Name Gets the name. Declaration public string Name { get; } Property Value Type Description System.String The name. Methods | Improve this Doc View Source Equals(HystrixCommandKey) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(HystrixCommandKey other) Parameters Type Name Description HystrixCommandKey other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.ValueType.ToString() Implements System.IEquatable<T>"
  },
  "api/NHystrix.HystrixEventType.html": {
    "href": "api/NHystrix.HystrixEventType.html",
    "title": "Class HystrixEventType | NHystrix",
    "keywords": "Class HystrixEventType The type of an event emitted by a HystrixCommand<TRequest, TResult> to HystrixMetrics . This class cannot be inherited. Inheritance System.Object HystrixEventType Implements System.IEquatable < HystrixEventType > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NHystrix Assembly : NHystrix.dll Syntax public sealed class HystrixEventType : IEquatable<HystrixEventType> Fields | Improve this Doc View Source BAD_REQUEST Declaration public static readonly HystrixEventType BAD_REQUEST Field Value Type Description HystrixEventType | Improve this Doc View Source CANCELLED Declaration public static readonly HystrixEventType CANCELLED Field Value Type Description HystrixEventType | Improve this Doc View Source COLLAPSED Declaration public static readonly HystrixEventType COLLAPSED Field Value Type Description HystrixEventType | Improve this Doc View Source COMMAND_MAX_ACTIVE Declaration public static readonly HystrixEventType COMMAND_MAX_ACTIVE Field Value Type Description HystrixEventType | Improve this Doc View Source EMIT Declaration public static readonly HystrixEventType EMIT Field Value Type Description HystrixEventType | Improve this Doc View Source EXCEPTION_THROWN Declaration public static readonly HystrixEventType EXCEPTION_THROWN Field Value Type Description HystrixEventType | Improve this Doc View Source FAILURE Declaration public static readonly HystrixEventType FAILURE Field Value Type Description HystrixEventType | Improve this Doc View Source FALLBACK_DISABLED Declaration public static readonly HystrixEventType FALLBACK_DISABLED Field Value Type Description HystrixEventType | Improve this Doc View Source FALLBACK_EMIT Declaration public static readonly HystrixEventType FALLBACK_EMIT Field Value Type Description HystrixEventType | Improve this Doc View Source FALLBACK_FAILURE Declaration public static readonly HystrixEventType FALLBACK_FAILURE Field Value Type Description HystrixEventType | Improve this Doc View Source FALLBACK_MISSING Declaration public static readonly HystrixEventType FALLBACK_MISSING Field Value Type Description HystrixEventType | Improve this Doc View Source FALLBACK_REJECTION Declaration public static readonly HystrixEventType FALLBACK_REJECTION Field Value Type Description HystrixEventType | Improve this Doc View Source FALLBACK_SUCCESS Declaration public static readonly HystrixEventType FALLBACK_SUCCESS Field Value Type Description HystrixEventType | Improve this Doc View Source RESPONSE_FROM_CACHE Declaration public static readonly HystrixEventType RESPONSE_FROM_CACHE Field Value Type Description HystrixEventType | Improve this Doc View Source SEMAPHORE_REJECTED The maximum number of bulkheading semaphores is reached and a semaphore could not be acquired. Declaration public static readonly HystrixEventType SEMAPHORE_REJECTED Field Value Type Description HystrixEventType | Improve this Doc View Source SHORT_CIRCUITED The circuit breaker is open, so the command was short circuited. Declaration public static readonly HystrixEventType SHORT_CIRCUITED Field Value Type Description HystrixEventType | Improve this Doc View Source SUCCESS Declaration public static readonly HystrixEventType SUCCESS Field Value Type Description HystrixEventType | Improve this Doc View Source THREAD_POOL_REJECTED Declaration public static readonly HystrixEventType THREAD_POOL_REJECTED Field Value Type Description HystrixEventType | Improve this Doc View Source TIMEOUT Declaration public static readonly HystrixEventType TIMEOUT Field Value Type Description HystrixEventType Properties | Improve this Doc View Source IsTerminal Gets a value indicating whether this instance is terminal. Declaration public bool IsTerminal { get; } Property Value Type Description System.Boolean true if this instance is terminal; otherwise, false . | Improve this Doc View Source Value Gets the value. Declaration public short Value { get; } Property Value Type Description System.Int16 The value. Methods | Improve this Doc View Source Equals(HystrixEventType) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(HystrixEventType other) Parameters Type Name Description HystrixEventType other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Object.GetHashCode() Implements System.IEquatable<T> See Also System.IEquatable <T>"
  },
  "api/NHystrix.Metric.HystrixCommandEvent.html": {
    "href": "api/NHystrix.Metric.HystrixCommandEvent.html",
    "title": "Class HystrixCommandEvent | NHystrix",
    "keywords": "Class HystrixCommandEvent Encapsulates and event that occurred as a result of executing a HystrixCommand<TRequest, TResult> . Inheritance System.Object HystrixCommandEvent Implements IHystrixEvent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NHystrix.Metric Assembly : NHystrix.dll Syntax public class HystrixCommandEvent : IHystrixEvent Constructors | Improve this Doc View Source HystrixCommandEvent(HystrixCommandKey, HystrixEventType, Exception) Initializes a new instance of the HystrixCommandEvent class. Declaration public HystrixCommandEvent(HystrixCommandKey commandKey, HystrixEventType eventType, Exception exception = null) Parameters Type Name Description HystrixCommandKey commandKey The command key. HystrixEventType eventType Type of the event. System.Exception exception The exception. (optional) Properties | Improve this Doc View Source CommandKey Gets the command key. Declaration public HystrixCommandKey CommandKey { get; } Property Value Type Description HystrixCommandKey The command key. | Improve this Doc View Source EventType Gets the type of the event. Declaration public HystrixEventType EventType { get; } Property Value Type Description HystrixEventType The type of the event. | Improve this Doc View Source Exception Gets the exception. Declaration public Exception Exception { get; } Property Value Type Description System.Exception The exception. Null if no exception occurred. Implements IHystrixEvent See Also IHystrixEvent"
  },
  "api/NHystrix.Exceptions.HystrixFailureException.html": {
    "href": "api/NHystrix.Exceptions.HystrixFailureException.html",
    "title": "Class HystrixFailureException | NHystrix",
    "keywords": "Class HystrixFailureException Class HystrixFailureException. Inheritance System.Object System.Exception HystrixRuntimeException HystrixFailureException HystrixFallbackException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NHystrix.Exceptions Assembly : NHystrix.dll Syntax public class HystrixFailureException : HystrixRuntimeException, ISerializable Constructors | Improve this Doc View Source HystrixFailureException(FailureType) Initializes a new instance of the HystrixFailureException class. Declaration public HystrixFailureException(FailureType failureType) Parameters Type Name Description FailureType failureType Type of the failure. | Improve this Doc View Source HystrixFailureException(FailureType, SerializationInfo, StreamingContext) Initializes a new instance of the HystrixFailureException class. Declaration protected HystrixFailureException(FailureType failureType, SerializationInfo info, StreamingContext context) Parameters Type Name Description FailureType failureType Type of the failure. System.Runtime.Serialization.SerializationInfo info The information. System.Runtime.Serialization.StreamingContext context The context. | Improve this Doc View Source HystrixFailureException(FailureType, String) Initializes a new instance of the HystrixFailureException class. Declaration public HystrixFailureException(FailureType failureType, string message) Parameters Type Name Description FailureType failureType Type of the failure. System.String message The message. | Improve this Doc View Source HystrixFailureException(FailureType, String, Exception) Initializes a new instance of the HystrixFailureException class. Declaration public HystrixFailureException(FailureType failureType, string message, Exception innerException) Parameters Type Name Description FailureType failureType Type of the failure. System.String message The message. System.Exception innerException The inner exception. Properties | Improve this Doc View Source FailureType Gets the type of the failure. Can be used to determine if the failure was due to a short-circuit or semaphore rejection. Declaration public FailureType FailureType { get; } Property Value Type Description FailureType The type of the failure. Implements System.Runtime.Serialization.ISerializable See Also HystrixRuntimeException"
  },
  "api/NHystrix.Exceptions.HystrixFallbackException.html": {
    "href": "api/NHystrix.Exceptions.HystrixFallbackException.html",
    "title": "Class HystrixFallbackException | NHystrix",
    "keywords": "Class HystrixFallbackException Thrown when a fallback attempt fails. Inheritance System.Object System.Exception HystrixRuntimeException HystrixFailureException HystrixFallbackException Implements System.Runtime.Serialization.ISerializable Inherited Members HystrixFailureException.FailureType System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NHystrix.Exceptions Assembly : NHystrix.dll Syntax public class HystrixFallbackException : HystrixFailureException, ISerializable Constructors | Improve this Doc View Source HystrixFallbackException(FailureType, Exception) Initializes a new instance of the HystrixFallbackException class. Declaration public HystrixFallbackException(FailureType failureType, Exception originalException) Parameters Type Name Description FailureType failureType Type of the failure. System.Exception originalException The original exception. | Improve this Doc View Source HystrixFallbackException(FailureType, Exception, SerializationInfo, StreamingContext) Initializes a new instance of the HystrixFallbackException class. Declaration protected HystrixFallbackException(FailureType failureType, Exception originalException, SerializationInfo info, StreamingContext context) Parameters Type Name Description FailureType failureType Type of the failure. System.Exception originalException The original exception. System.Runtime.Serialization.SerializationInfo info The information. System.Runtime.Serialization.StreamingContext context The context. | Improve this Doc View Source HystrixFallbackException(FailureType, String, Exception) Initializes a new instance of the HystrixFallbackException class. Declaration public HystrixFallbackException(FailureType failureType, string message, Exception originalException) Parameters Type Name Description FailureType failureType Type of the failure. System.String message The message. System.Exception originalException The original exception. | Improve this Doc View Source HystrixFallbackException(FailureType, String, Exception, Exception) Initializes a new instance of the HystrixFallbackException class. Declaration public HystrixFallbackException(FailureType failureType, string message, Exception innerException, Exception originalException) Parameters Type Name Description FailureType failureType Type of the failure. System.String message The message. System.Exception innerException The inner exception. System.Exception originalException The original exception. Properties | Improve this Doc View Source OriginalException Gets the original exception the caused the fallback to be triggered. Declaration public Exception OriginalException { get; } Property Value Type Description System.Exception The original exception. Implements System.Runtime.Serialization.ISerializable See Also HystrixFailureException"
  },
  "api/NHystrix.HystrixCommand-2.html": {
    "href": "api/NHystrix.HystrixCommand-2.html",
    "title": "Class HystrixCommand<TRequest, TResult> | NHystrix",
    "keywords": "Class HystrixCommand<TRequest, TResult> Base class for all HystrixCommands. Providing functionality for: Bulkhead Pattern Timeout Circuit Breaker Pattern Fallback responses Inheritance System.Object HystrixCommand<TRequest, TResult> Implements IHystrixCommand <TRequest, TResult> System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NHystrix Assembly : NHystrix.dll Syntax public abstract class HystrixCommand<TRequest, TResult> : IHystrixCommand<TRequest, TResult>, IDisposable Type Parameters Name Description TRequest The type of the request. TResult The type of the result. Remarks Fallback You can support graceful degradation in a Hystrix command by adding a fallback method that Hystrix will call to obtain a default value or values in case the main command fails. You will want to implement a fallback for most Hystrix commands that might conceivably fail, with a couple of exceptions: a command that performs a write operation If your Hystrix command is designed to do a write operation rather than to return a value, there isn't much point in implementing a fallback. If the write fails, you probably want the failure to propagate back to the caller. batch systems/offline compute If your Hystrix command is filling up a cache, or generating a report, or doing any sort of offline computation, it's usually more appropriate to propagate the error back to the caller who can then retry the command later, rather than to send the caller a silently-degraded response. Whether or not your command has a fallback, all of the usual Hystrix state and circuit-breaker state/metrics are updated to indicate the command failure. In an ordinary HystrixCommand you implement a fallback by means of a GetFallback() () implementation. Hystrix will execute this fallback for all types of failure such as RunAsync() failure, timeout, thread pool or semaphore rejection, and circuit-breaker short-circuiting. Error Propagation All exceptions thrown from the RunAsync() method except for HystrixBadRequestException and System.ArgumentException count as failures and trigger GetFallback() and circuit-breaker logic. You can wrap the exception that you would like to throw in HystrixBadRequestException . The HystrixBadRequestException is intended for use cases such as reporting illegal arguments or non-system failures that should not count against the failure metrics and should not trigger fallback logic. Constructors | Improve this Doc View Source HystrixCommand(HystrixCommandKey, HystrixCommandProperties) Initializes a new instance of the HystrixCommand<TRequest, TResult> class. Declaration protected HystrixCommand(HystrixCommandKey commandKey, HystrixCommandProperties properties) Parameters Type Name Description HystrixCommandKey commandKey The command key. HystrixCommandProperties properties The properties. Properties | Improve this Doc View Source CommandKey Gets the command key. Declaration public HystrixCommandKey CommandKey { get; } Property Value Type Description HystrixCommandKey The command key. Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc View Source Execute(TRequest) Executes the command. Declaration public TResult Execute(TRequest request = null) Parameters Type Name Description TRequest request Returns Type Description TResult TResult. Exceptions Type Condition HystrixBadRequestException HystrixFailureException HystrixTimeoutException | Improve this Doc View Source ExecuteAsync(TRequest) Executes the command. Declaration public Task<TResult> ExecuteAsync(TRequest request = null) Parameters Type Name Description TRequest request Returns Type Description System.Threading.Tasks.Task <TResult> Task<TResult>. Exceptions Type Condition HystrixBadRequestException HystrixFailureException HystrixTimeoutException | Improve this Doc View Source Finalize() Finalizes an instance of the HystrixCommand<TRequest, TResult> class. Declaration protected void Finalize() | Improve this Doc View Source GetFallback() When overridden in a derived class, returns the fallback response when fallback is enabled. Declaration protected virtual Task<TResult> GetFallback() Returns Type Description System.Threading.Tasks.Task <TResult> The fallback response for the command. Exceptions Type Condition System.NotImplementedException | Improve this Doc View Source RunAsync(TRequest) Implements the logic to perform when ExecuteAsync(TRequest) is called. Declaration protected abstract Task<TResult> RunAsync(TRequest request) Parameters Type Name Description TRequest request Returns Type Description System.Threading.Tasks.Task <TResult> Task<TResult>. Implements IHystrixCommand<TRequest, TResult> System.IDisposable See Also IHystrixCommand <TRequest, TResult>"
  },
  "api/NHystrix.HystrixCommandGroup.html": {
    "href": "api/NHystrix.HystrixCommandGroup.html",
    "title": "Struct HystrixCommandGroup | NHystrix",
    "keywords": "Struct HystrixCommandGroup A HystrixCommandGroup is used to group commands together. For example, by service or resource. Implements System.IEquatable < HystrixCommandGroup > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NHystrix Assembly : NHystrix.dll Syntax public struct HystrixCommandGroup : IEquatable<HystrixCommandGroup> Constructors | Improve this Doc View Source HystrixCommandGroup(String) Initializes a new instance of the HystrixCommandGroup struct. Declaration public HystrixCommandGroup(string name) Parameters Type Name Description System.String name The name. Properties | Improve this Doc View Source CommandKeys Gets the command keys. Declaration public IReadOnlyCollection<HystrixCommandKey> CommandKeys { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < HystrixCommandKey > The command keys. | Improve this Doc View Source Name Gets or sets the name. Declaration public string Name { get; set; } Property Value Type Description System.String The name. Methods | Improve this Doc View Source AddCommandKey(String) Creates a new HystrixCommandKey with the specified name and adds it to this group. Declaration public HystrixCommandKey AddCommandKey(string commandKeyName) Parameters Type Name Description System.String commandKeyName Name of the command key. Returns Type Description HystrixCommandKey The new HystrixCommandKey . | Improve this Doc View Source Equals(HystrixCommandGroup) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(HystrixCommandGroup other) Parameters Type Name Description HystrixCommandGroup other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.ValueType.ToString() Implements System.IEquatable<T>"
  },
  "api/NHystrix.HystrixDelegatingHandler.html": {
    "href": "api/NHystrix.HystrixDelegatingHandler.html",
    "title": "Class HystrixDelegatingHandler | NHystrix",
    "keywords": "Class HystrixDelegatingHandler A System.Net.Http.DelegatingHandler that wraps the request in the Circuit Breaker Pattern and Bulkhead Pattern. Similar functionality to the HystrixCommand<TRequest, TResult> , but timeouts are handled by System.Net.Http.HttpClient directly. Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler HystrixDelegatingHandler Implements System.IDisposable Inherited Members System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NHystrix Assembly : NHystrix.dll Syntax public class HystrixDelegatingHandler : DelegatingHandler, IDisposable Remarks Should be used before the RetryDelegatingHandler in the pipeline. var hystrix = new HystrixDelegatingHandler(commandKey, properties, new RetryDelegatingHandler()); HTTP Status Codes Failures are counted and emitted for: Status Reason HystrixEvent Comments 408 Request Timeout HystrixEventType.TIMEOUT 504 Gateway Timeout HystrixEventType.TIMEOUT 403 Forbidden HystrixEventType.FAILURE Some APIs, such as GitHub, return a 403 when a rate limit is reached 429 Too Many Requests HystrixEventType.FAILURE Proposed rate-limit status code. See RFC 6585 >=500 Server Errors HystrixEventType.FAILURE All server side errors Http 400 Bad Requests are not counted against failures but do emit a HystrixEventType.BAD_REQUEST . All other Http Status codes are ignored by NHystrix. Exceptions and Fallback Like the HystrixCommand<TRequest, TResult> , the HystrixDelegatingHandler does not throw an exception on error nor does is allow exceptions to propagate up the stack. Rather, it relies on the fallback implementation to handle error situations. By default, when fallback is enabled, an HttpResponseMessage with a status code of [204 No Content] will be returned and FALLBACK_MISSING emitted if no fallback function is provided. Metrics The handler emits: Request Counts ( EMIT ) for all requests, short-circuited or not. Bad Request ( BAD_REQUEST ) for HTTP 400. Timeout ( TIMEOUT ) Failure ( FAILURE ) Exception Thrown ( EXCEPTION_THROWN ) Fallback Called ( FALLBACK_EMIT ) Fallback Success ( FALLBACK_SUCCESS ) Fallback Failure ( FALLBACK_FAILURE ) Fallback Disabled ( FALLBACK_DISABLED ) Fallback Missing ( FALLBACK_MISSING ) Short Circuited because the circuit breaker is open ( SHORT_CIRCUITED ) Semaphore rejected if a bulkhead semaphore could not be obtained before the BulkheadSemaphoreAcquireTimeoutInMilliseconds expires. ( SHORT_CIRCUITED ) Constructors | Improve this Doc View Source HystrixDelegatingHandler(HystrixCommandKey, HystrixCommandProperties, HttpMessageHandler, Func<HttpResponseMessage>) Initializes a new instance of the HystrixDelegatingHandler class. Declaration public HystrixDelegatingHandler(HystrixCommandKey commandKey, HystrixCommandProperties properties, HttpMessageHandler innerHandler, Func<HttpResponseMessage> fallback = null) Parameters Type Name Description HystrixCommandKey commandKey The command key. HystrixCommandProperties properties The properties. System.Net.Http.HttpMessageHandler innerHandler The inner handler. System.Func < System.Net.Http.HttpResponseMessage > fallback Optional. The function to execute as the fallback if the circuit-breaker is open. If no fallback function is provided, an HttpResponseMessage with a status code of [204 No Content] will be returned. Exceptions Type Condition System.ArgumentNullException properties Properties | Improve this Doc View Source CommandKey Gets the command key. Declaration public HystrixCommandKey CommandKey { get; } Property Value Type Description HystrixCommandKey The command key. | Improve this Doc View Source IsCircuitBreakerEnabled Gets a value indicating whether this instance is circuit breaker enabled. Declaration public bool IsCircuitBreakerEnabled { get; } Property Value Type Description System.Boolean true if this instance is circuit breaker enabled; otherwise, false . | Improve this Doc View Source IsCircuitBreakerOpen Gets a value indicating whether this instance is circuit breaker open. Declaration public bool IsCircuitBreakerOpen { get; } Property Value Type Description System.Boolean true if this instance is circuit breaker open; otherwise, false . Methods | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the System.Net.Http.DelegatingHandler , and optionally disposes of the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to releases only unmanaged resources. Overrides System.Net.Http.DelegatingHandler.Dispose(System.Boolean) | Improve this Doc View Source SendAsync(HttpRequestMessage, CancellationToken) Send an HTTP request message. Declaration protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The HTTP request message to send to the server. System.Threading.CancellationToken cancellationToken A cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > The task object representing the asynchronous operation. Overrides System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken) Implements System.IDisposable See Also System.Net.Http.DelegatingHandler"
  }
}